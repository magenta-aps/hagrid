# pylint: disable=W9903
"""Commands from controlling postgresql."""
import os

from core.management.util import gen_random_id

from core.management.DockerService import DockerService
from core.management.ServiceCommand import ServiceCommand


class Command(DockerService, ServiceCommand):
    """Commands for controlling PostgreSQL.

    Examples:

        Starting the database:

        .. code:: console

            $ python manage.py postgres start

            Postgres started!

        Stopping the database:

        .. code:: console

            $ python manage.py postgres stop

            Postgres stopped!

        Getting database status:

        .. code:: console

            $ python manage.py postgres status

            Postgres is (not) running

        Getting database log:

        .. code:: console

            $ python manage.py postgres log

            The files belonging to this database system will be owned by ...
            This user must also own the server process.

            ...

    Note:

        A running docker daemon is required to run the above commands.

        Installing docker can be done by following the guides present at:

        * https://docs.docker.com/engine/installation/
    """

    service_name = 'Postgres'
    help = 'Control the postgresql database'

    image = 'postgres:9.6'
    ports = {
        '5432/tcp': None,
    }

    def start(self):
        # pylint: disable=no-name-in-module
        from hagrid.settings import DATABASES
        if (DATABASES['default']['ENGINE'] ==
                'django.db.backends.postgresql'):
            print "Warning: Project, already configured to use Postgres"
            print "Warning: Overriding current configuration!"

        super(Command, self).start()

    def _setup_volumes(self):
        # Setup path to our database
        # pylint: disable=no-name-in-module
        from hagrid.settings import BASE_DIR
        database_folder = BASE_DIR + '/database/pg' + gen_random_id() + '/'

        # Create database folder
        if not os.path.exists(database_folder):
            os.makedirs(database_folder)

        # Bind volumes
        self.volumes = {
            database_folder: {
                'bind': '/var/lib/postgresql/data',
                'mode': 'rw'
            },
        }

    def setup_settings(self, container, portmap):
        print "Writing Postgres configuration to settings.py"

        # Server port
        port = portmap['5432/tcp'][0]['HostPort']
        print "Postgres running on port: " + port

        # Setup path to our database
        # pylint: disable=no-name-in-module
        from hagrid.settings import BASE_DIR
        settings_file = BASE_DIR + '/hagrid/settings/components/database.py'

        with open(settings_file, "w") as settings:
            lines = [
                "# Autogenerated",
                '"""Configuration specific database settings."""',
                "",
                "# Postgres configuration.",
                "#------------------------",
                "DATABASES = {",
                "    'default': {",
                "        'ENGINE': 'django.db.backends.postgresql',",
                "        'NAME': 'postgres',",
                "        'USER': 'postgres',",
                "        'PASSWORD': '',",
                "        'HOST': '127.0.0.1',",
                "        'PORT': '" + str(port) + "',",
                "    }",
                "}",
            ]
            for line in lines:
                settings.write(line + '\n')

    def __init__(self):
        super(Command, self).__init__()
        self._setup_volumes()
